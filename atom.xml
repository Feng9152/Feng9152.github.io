<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feng9152</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-12T14:54:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Feng9152</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 开发中 GCD 的使用</title>
    <link href="http://yoursite.com/2017/04/11/iOS-%E5%BC%80%E5%8F%91%E4%B8%AD-GCD-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/04/11/iOS-开发中-GCD-的使用/</id>
    <published>2017-04-11T14:22:56.000Z</published>
    <updated>2017-04-12T14:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 开发中少不了多线程的使用，目前共有四种多线程方法，分别是PThread、NSThread、GCD、NSOperation。其中因为 GCD 使用起来方便高效而为广大开发人员采用！这篇文章就介绍一些开发中常见的 GCD 的用法及其注意事项。<br>\&lt;!– more –></p>
<h1 id="GCD（Grand-Central-Dispatch）介绍"><a href="#GCD（Grand-Central-Dispatch）介绍" class="headerlink" title="GCD（Grand Central Dispatch）介绍"></a>GCD（Grand Central Dispatch）介绍</h1><p>GCD属于系统级的线程管理，在Dispatch queue中执行需要执行的任务性能非常的高。GCD这块已经开源，地址<a href="">http://libdispatch.macosforge.org</a>。GCD中的FIFO队列称为dispatch queue，用来保证先进来的任务先得到执行。</p>
<h2 id="1-什么是GCD？"><a href="#1-什么是GCD？" class="headerlink" title="1. 什么是GCD？"></a>1. 什么是GCD？</h2><p>全称是Grand Central Dispatch，可译为“牛逼的中枢调度器”<br>纯C语言，提供了非常多强大的函数 </p>
<h2 id="2-GCD的优势"><a href="#2-GCD的优势" class="headerlink" title="2. GCD的优势"></a>2. GCD的优势</h2><p>GCD是苹果公司为多核的并行运算提出的解决方案<br>GCD会自动利用更多的CPU内核（比如双核、四核）<br>GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）<br>程序员只需要告诉GCD想要执行什么任务，不需要编写任何线程管理代码 </p>
<h2 id="3-GCD概要"><a href="#3-GCD概要" class="headerlink" title="3. GCD概要"></a>3. GCD概要</h2><ul>
<li>和operation queue一样都是基于队列的并发编程API，通过集中管理大家协同使用的线程池。</li>
<li>公开的5个不同队列：运行在主线程中的main queue，3个不同优先级的后台队列（High Priority Queue，Default Priority Queue，Low Priority Queue），以及一个优先级更低的后台队列Background Priority Queue（用于I/O）</li>
<li>可创建自定义队列：串行或并列队列。自定义一般放在Default Priority Queue和Main Queue里。</li>
<li>操作是在多线程上还是单线程主要是看队列的类型和执行方法，并行队列异步执行才能在多线程，并行队列同步执行就只会在这个并行队列在队列中被分配的那个线程执行。<h1 id="GCD-中的基本概念"><a href="#GCD-中的基本概念" class="headerlink" title="GCD 中的基本概念"></a>GCD 中的基本概念</h1></li>
<li>队列  dispatch queue </li>
<li>任务</li>
<li>队列组</li>
</ul>
<h1 id="GCD-在-iOS-开发中常见用法"><a href="#GCD-在-iOS-开发中常见用法" class="headerlink" title="GCD 在 iOS 开发中常见用法"></a>GCD 在 iOS 开发中常见用法</h1><h2 id="1-延迟执行"><a href="#1-延迟执行" class="headerlink" title="1.  延迟执行"></a>1.  延迟执行</h2><h2 id="2-实现一次性代码"><a href="#2-实现一次性代码" class="headerlink" title="2.  实现一次性代码"></a>2.  实现一次性代码</h2><h2 id="3-使用队列组解决-需求：从网络上下载两张图片，把两张图片合并成一张最终显示在view上"><a href="#3-使用队列组解决-需求：从网络上下载两张图片，把两张图片合并成一张最终显示在view上" class="headerlink" title="3.  使用队列组解决      需求：从网络上下载两张图片，把两张图片合并成一张最终显示在view上"></a>3.  使用队列组解决      需求：从网络上下载两张图片，把两张图片合并成一张最终显示在view上</h2><h1 id="GCD-死锁问题"><a href="#GCD-死锁问题" class="headerlink" title="GCD 死锁问题"></a>GCD 死锁问题</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 开发中少不了多线程的使用，目前共有四种多线程方法，分别是PThread、NSThread、GCD、NSOperation。其中因为 GCD 使用起来方便高效而为广大开发人员采用！这篇文章就介绍一些开发中常见的 GCD 的用法及其注意事项。&lt;br&gt;\&amp;lt;!– mo
    
    </summary>
    
    
      <category term="GCD" scheme="http://yoursite.com/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>关于使用 Hexo + GitHub Pages 搭建个人博客的流程</title>
    <link href="http://yoursite.com/2017/03/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>http://yoursite.com/2017/03/25/我的第一篇博文/</id>
    <published>2017-03-25T06:28:18.000Z</published>
    <updated>2017-04-12T14:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>越来越多的人开始借助于 GitHub 来免费搭建个人博客，一方面记录下自己学习生活的点滴，另一方面也给后来者分享经验总结。提升自己，方便他人。本文就写一下 Mac 平台搭建博客的总结和过程中遇到的一些坑。<br><a id="more"></a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><hr>
<p>整个搭建过程大致需要以下步骤完成</p>
<ul>
<li>安装 <code>node.js</code> </li>
<li>安装 <code>git</code>        </li>
<li>安装 <code>hexo</code>     </li>
<li>生成本地静态博客，在浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 可以看到</li>
<li>注册 GitHub 账号，新建仓库 格式为 <code>用户名.github.io</code>   例如：<code>feng9152.github.io</code>  配置 GitHub 账户与你电脑之间的 <code>SSH</code>连接</li>
<li>配置 hexo 目录下 <code>_config.yml</code> 文件 </li>
<li>浏览器查看(网络同步原因可能会延迟几分钟) <a href="https://feng9152.github.io/" target="_blank" rel="external">https://feng9152.github.io/</a> 其中 <code>feng9152</code> 换成自己的用户名可以看到与 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 这里一样的页面</li>
<li>配置 hexo 主题目录下 <code>_config.yml</code> 文件</li>
</ul>
<h1 id="开始安装配置"><a href="#开始安装配置" class="headerlink" title="开始安装配置"></a>开始安装配置</h1><hr>
<h2 id="查看电脑是否安装-node-js"><a href="#查看电脑是否安装-node-js" class="headerlink" title="查看电脑是否安装 node.js"></a>查看电脑是否安装 <code>node.js</code></h2><blockquote>
<p>命令：<code>node --version</code> 显示版本号：例如 <code>v6.9.5</code> 即安装有,否则请移步> <a href="https://nodejs.org/en/" target="_blank" rel="external">NOde.js</a>安装</p>
</blockquote>
<h2 id="查看电脑是否安装-git"><a href="#查看电脑是否安装-git" class="headerlink" title="查看电脑是否安装 git"></a>查看电脑是否安装 <code>git</code></h2><blockquote>
<p>命令：<code>git --version</code> 显示版本号：例如 <code>git version 2.10.1 (Apple Git-78)√</code> 即安装有,否则请移步>  <a href="https://git-scm.com/" target="_blank" rel="external">git</a> 安装</p>
</blockquote>
<h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 <code>hexo</code></h2><blockquote>
<p>参考 <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 官方文档<br> <code>$ npm install -g hexo-cli</code> 或者 <code>$ sudo npm install -g hexo-cli</code>  </p>
<p><strong><em>⚠️出现如下图所示是网络问题 可以多次尝试或者其它时间再试即可</em></strong><br><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fduazhc30qj30vg0kmgqd.jpg" alt="">  </p>
<p>安装成功后 建议指定位置自定义新建文件夹 比如 blog<br><code>$ cd blog</code><br><code>$ hexo init</code><br><code>$ hexo g</code><br><code>$ npm install</code><br>会在 blog 文件夹下生成目录文件   </p>
<blockquote>
<p><code>_config.yml</code><br><code>db.json</code><br><code>node_modules</code><br><code>package.json</code><br><code>scaffolds</code><br><code>source</code><br><code>themes</code> </p>
</blockquote>
<p><code>$ hexo s</code> 访问本地 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 可以看到博客已经搭建成功页面  <img src="https://ww4.sinaimg.cn/large/006tKfTcly1fe0esml4cjj31kw0vq7wh.jpg" alt=""></p>
</blockquote>
<h2 id="注册-Github-账户，已有账户的跳过，新建仓库，如下图"><a href="#注册-Github-账户，已有账户的跳过，新建仓库，如下图" class="headerlink" title="注册 Github 账户，已有账户的跳过，新建仓库，如下图"></a>注册 <a href="https://github.com" target="_blank" rel="external">Github</a> 账户，已有账户的跳过，新建仓库，如下图</h2><blockquote>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1fe0m5b4ppej31570xuqc1.jpg" alt="">  </p>
</blockquote>
<h2 id="配置-GitHub-与你的电脑之间的-SSH-连接"><a href="#配置-GitHub-与你的电脑之间的-SSH-连接" class="headerlink" title="配置 GitHub 与你的电脑之间的 SSH 连接"></a>配置 GitHub 与你的电脑之间的 SSH 连接</h2><blockquote>
<p>添加 SSH Key 到 GitHub   检查本地是否有 SSH Keys ？<br><code>$ ls -al ~/.ssh</code><br>如果有文件<code>id_rsa.pub</code>或<code>id_dsa.pub</code><br>Find前往文件夹 <code>~/.ssh/id_rsa.pub</code> 打开id_rsa.pub文件，里面的信息即为 SSH key，复制信息。<br>进入 Github –> Settings 按照下图所示操作即可完成 SSH Key 添加:</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe0msh0z2dj313j0ziag8.jpg" alt=""><br>进去后点击右上角添加新的 SSH Key<br><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe0mx38qvmj31jo0oyjxe.jpg" alt="">  </p>
<p>如果没有文件 <code>id_rsa.pub</code>或<code>id_dsa.pub</code> 需要生成 SSH Key<br>终端输入以下命令：<br> <code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br>这里 <code>&quot;your_email@example.com&quot;</code> 替换成你注册 GitHub 的邮箱即可，终端会有一个 SHA256 编码生成即代表成功。<br>按照上面方法步骤前往文件夹 找到 SSH Key 添加到 GitHub 即可</p>
</blockquote>
<h2 id="修改-Hexo-目录-此处及刚才创建的-blog-文件夹-下-config-yml-文件"><a href="#修改-Hexo-目录-此处及刚才创建的-blog-文件夹-下-config-yml-文件" class="headerlink" title="修改 Hexo 目录(此处及刚才创建的 blog 文件夹)下 _config.yml 文件"></a>修改 Hexo 目录(此处及刚才创建的 blog 文件夹)下 <code>_config.yml</code> 文件</h2><blockquote>
<p>打开 <code>_config.yml</code> 文件 下拉到最后 修改成以下样式： <code>feng9152</code>  替换成自己的用户名</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fe0ojnaeevj30ts05k0tm.jpg" alt=""></p>
</blockquote>
<p><strong><em>⚠️此处一定要严格按照格式修改，否则无法推送到 GitHub 上， 每个<code>:</code>后需要一个空格， <code>type</code>、 <code>repo</code>、<code>branch</code> 前面需要留出两个空格！</em></strong></p>
<h2 id="发表文章操作步骤"><a href="#发表文章操作步骤" class="headerlink" title="发表文章操作步骤"></a>发表文章操作步骤</h2><ul>
<li><strong>hexo new</strong> “你的文章标题”  # 新建文章</li>
<li><strong>hexo g</strong>  # 生成文章</li>
<li><strong>hexo d</strong>  # 部署文章到网站<br><strong>注意：以上需要在你所定义的博客文件夹目录下进行</strong></li>
</ul>
<h2 id="如何设置「阅读全文」？"><a href="#如何设置「阅读全文」？" class="headerlink" title="如何设置「阅读全文」？"></a>如何设置「阅读全文」？</h2><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。 也就是说，在首页显示文章的摘录并显示 <strong>阅读全文</strong> 按钮，可以通过以下方法：</p>
<ol>
<li>在文章中使用 \&lt;!– more –> 手动进行截断，Hexo 提供的方式 推荐</li>
<li>在文章的 front-matter 中添加 description，并提供文章摘录</li>
<li>自动形成摘要，在 主题配置文件 中添加：<br>auto_excerpt:<br>enable: true<br>length: 150<br>默认截取的长度为 150 字符，可以根据需要自行设定  </li>
</ol>
<p>建议使用 \&lt;!– more –>（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p>
<h1 id="绑定个人域名（可选）"><a href="#绑定个人域名（可选）" class="headerlink" title="绑定个人域名（可选）"></a>绑定个人域名（可选）</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越来越多的人开始借助于 GitHub 来免费搭建个人博客，一方面记录下自己学习生活的点滴，另一方面也给后来者分享经验总结。提升自己，方便他人。本文就写一下 Mac 平台搭建博客的总结和过程中遇到的一些坑。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
