<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Feng9152</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-01T15:16:41.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Feng9152</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工作常用网站</title>
    <link href="http://yoursite.com/2017/05/17/%E5%B7%A5%E4%BD%9C%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2017/05/17/工作常用网站/</id>
    <published>2017-05-17T14:54:37.000Z</published>
    <updated>2017-07-01T15:16:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章收藏了我生活和工作中会经常访问的一些网站，比如技术博客类，效率工具类，资源查找等。在这里总结一下，我们共同学习进步！</p>
<a id="more"></a>
<h1 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h1><ul>
<li>王    巍  <a href="https://onevcat.com/#blog" target="_blank" rel="external">https://onevcat.com/#blog</a></li>
<li>廖雪峰  <a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">http://www.liaoxuefeng.com/</a></li>
<li>唐    巧  <a href="http://blog.devtang.com/" target="_blank" rel="external">http://blog.devtang.com/</a></li>
<li>阮一峰  <a href="http://www.ruanyifeng.com/" title="http://www.ruanyifeng.com" target="_blank" rel="external">http://www.ruanyifeng.com/</a></li>
<li>王    垠  <a href="http://www.yinwang.org/" target="_blank" rel="external">http://www.yinwang.org/</a></li>
<li>孙    源  <a href="http://blog.sunnyxx.com/" target="_blank" rel="external">http://blog.sunnyxx.com/</a></li>
<li><a href="http://www.jianshu.com/u/88a056103c02" target="_blank" rel="external">没故事的卓同学</a>  </li>
<li><a href="http://news.dbanotes.net/" title="Startup News" target="_blank" rel="external">Startup News</a></li>
<li><a href="http://stackoverflow.com/" title="Stack Overflow" target="_blank" rel="external">Stack Overflow</a></li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a></li>
<li><a href="https://github.com/" title="GitHub" target="_blank" rel="external">GitHub</a><h1 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h1></li>
<li><a href="https://www.panc.cc/" target="_blank" rel="external">胖次网盘搜索</a>  </li>
<li><a href="http://www.xilinjie.com/" target="_blank" rel="external">西林街搜索</a></li>
<li><a href="http://www.quzhuanpan.com/" target="_blank" rel="external">去转盘网</a><h1 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h1></li>
<li><a href="https://shimo.im/" title="石墨 - 可多人实时协作的云端文档和表格" target="_blank" rel="external">石墨 - 可多人实时协作的云端文档和表格</a></li>
<li><a href="https://jinshuju.net/" title="金数据 - 免费好用的表单和数据收集整理分析工具" target="_blank" rel="external">金数据 - 免费好用的表单和数据收集整理分析工具</a></li>
<li><a href="https://convertio.co/zh/" title="Convertio — 文件转换器" target="_blank" rel="external">Convertio — 文件转换器</a></li>
<li><a href="https://smallpdf.com/cn" title="Smallpdf.com – 您所有PDF问题的免费解决方案" target="_blank" rel="external">Smallpdf.com – 您所有PDF问题的免费解决方案</a></li>
<li><a href="https://www.chuangkit.com/" title="平面设计,简单,快速,轻松完成平面设计,2016最好的在线平面设计工具-创客贴" target="_blank" rel="external">平面设计,简单,快速,轻松完成平面设计,2016最好的在线平面设计工具-创客贴</a></li>
<li><a href="http://icon.wuruihong.com/" title="图标工场 - 移动应用图标生成工具，一键生成所有尺寸的应用图标" target="_blank" rel="external">图标工场 - 移动应用图标生成工具，一键生成所有尺寸的应用图标</a></li>
<li><a href="http://www.alexa.cn/" target="_blank" rel="external">网站排名查询</a><h1 id="图片类网站"><a href="#图片类网站" class="headerlink" title="图片类网站"></a>图片类网站</h1></li>
<li><a href="http://www.iconfont.cn/" title="Iconfont-阿里巴巴矢量图标库" target="_blank" rel="external">Iconfont-阿里巴巴矢量图标库</a>  </li>
<li><a href="http://canvas.qq.com/index" target="_blank" rel="external">腾讯出品的一个在线免费图片设计工具—小白必备</a></li>
<li><a href="http://www.easyicon.net/" title="图标下载，ICON(PNG/ICO/ICNS)图标搜索下载 | EASYICON.NET" target="_blank" rel="external">图标下载，ICON(PNG/ICO/ICNS)图标搜索下载 | EASYICON.NET</a></li>
<li><a href="https://pixabay.com/" title="免费图片 - Pixabay" target="_blank" rel="external">免费图片 - Pixabay</a></li>
<li><a href="https://www.sitebuilderreport.com/stock-up/popular" title="Most Popular Stock Up Photos" target="_blank" rel="external">Most Popular Stock Up Photos</a></li>
<li><a href="https://visualhunt.com/" title="Visual Hunt" target="_blank" rel="external">Visual Hunt</a></li>
<li><a href="http://huaban.com/" title="花瓣网_陪你做生活的设计师（发现、采集你喜欢的灵感、家居、穿搭、婚礼、美食、旅行、美图、商品等）" target="_blank" rel="external">花瓣网_陪你做生活的设计师（发现、采集你喜欢的灵感、家居、穿搭、婚礼、美食、旅行、美图、商品等）</a></li>
<li><a href="https://pixabay.com/zh/photos/?image_type=&amp;cat=&amp;min_width=&amp;min_height=&amp;q=&amp;order=popular" title="Pixabay的免费图片" target="_blank" rel="external">Pixabay的免费图片</a></li>
<li><a href="http://www.polayoutu.com/collections" title="泼辣有图 | Polayoutu - Free Chinese stock photos" target="_blank" rel="external">泼辣有图 | Polayoutu - Free Chinese stock photos</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章收藏了我生活和工作中会经常访问的一些网站，比如技术博客类，效率工具类，资源查找等。在这里总结一下，我们共同学习进步！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 学习心得</title>
    <link href="http://yoursite.com/2017/05/10/Git-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
    <id>http://yoursite.com/2017/05/10/Git-学习心得/</id>
    <published>2017-05-10T15:54:44.000Z</published>
    <updated>2017-05-14T09:08:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是开发中使用最广泛的分布式版本控制系统（没有之一）。<br>不同于 SVN  等集中式版本控制系统，Git 使用时候不需要时刻联网，因为每个人电脑里都有完整的版本库，所以其安全性也要高很多。Git 还有强大便捷的远程仓库、分支管理等功能！赢得了全球开发者的青睐！</p>
<a id="more"></a>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><ul>
<li>git init  初始化 git 仓库</li>
<li>git add   添加文件到 git 仓库</li>
<li>git commit -m “xxxx”</li>
<li>git status  查看工作去区状态</li>
<li>git diff  查看文件修改内容 <h1 id="项目版本管理"><a href="#项目版本管理" class="headerlink" title="项目版本管理"></a>项目版本管理</h1></li>
<li>git log  查看提交历史确定回退版本</li>
<li>git log –pretty=oneline </li>
<li>git reflog  查看命令历史确定前进到哪个版本</li>
<li>git reset –hard commit_id<br>-<br>暂时储藏工作现场</li>
<li>git stash<br>重回工作现场</li>
<li>git stash pop<br>丢弃没有合并过的分支</li>
<li>git branch -D <name><br>丢弃工作区修改</name></li>
<li>git checkout – file</li>
<li>git reset HEAD file<br>删除一个文件</li>
<li>git rm<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1>关联远程库</li>
<li>git remote add origin git@server-name:path/repo-name.git<br>推送分支内容</li>
<li>git push -u origin master</li>
<li>git push origin master<br>克隆远程库</li>
<li>git clone<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1></li>
<li>git branch              查看当前分支</li>
<li>git branch <name>       创建分支</name></li>
<li>git checkout <name>     切换分支</name></li>
<li>git checkout -b <name>  创建 + 切换分支</name></li>
<li>git merge <name>        合并某分支到当前分支</name></li>
<li>git branch -d <name>    删除分支</name></li>
<li>git log –graph         查看分支合并图<h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1></li>
<li>git tag <name>  新建一个标签</name></li>
<li>git tag -a <tagname> -m “xxxxx”  指定标签信息</tagname></li>
<li>git tag  查看所有标签</li>
<li>git push origin <tagname></tagname></li>
<li>git push origin –tags</li>
<li>git push origin :refs/tags/<tagname><h1 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h1>Git 官方网站：<a href="http://git-scm.com" target="_blank" rel="external">http://git-scm.com</a><br>廖雪峰：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">http://www.liaoxuefeng.com/</a><h1 id="Git-使用场景"><a href="#Git-使用场景" class="headerlink" title="Git 使用场景"></a>Git 使用场景</h1><h2 id="本地仓库推送到远程库"><a href="#本地仓库推送到远程库" class="headerlink" title="本地仓库推送到远程库"></a>本地仓库推送到远程库</h2><ol>
<li>终端 cd 到项目文件夹 初始化当前文件夹变为 git 可以管理的文件夹<blockquote>
<p>git init </p>
</blockquote>
</li>
</ol>
</tagname></li>
</ul>
<ol>
<li>关联远程仓库（已经在 GitHub 建好远程库）<blockquote>
<p>git remote add origin  远程库地址</p>
</blockquote>
</li>
<li>把文件添加到版本库中，使用 git add  . 命令把文件添加到暂存区里面，后面空格后小数点 . 意味添加文件夹所有文件<blockquote>
<p>git add  .</p>
</blockquote>
</li>
<li>提交文件到仓库 使用 git commit 命令<blockquote>
<p>git commit -m ‘这里提交说明’</p>
</blockquote>
</li>
<li>获取远程库与本地同步合并（如果远程库不为空必须有这一步，否则后面提交会失败）<blockquote>
<p>git pull —rebase origin master</p>
</blockquote>
</li>
<li>使用 git push 命令推送本地文件到远程仓库，实际上是把当前分支 master 推送到远程<blockquote>
<p>git push -u origin master </p>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 是开发中使用最广泛的分布式版本控制系统（没有之一）。&lt;br&gt;不同于 SVN  等集中式版本控制系统，Git 使用时候不需要时刻联网，因为每个人电脑里都有完整的版本库，所以其安全性也要高很多。Git 还有强大便捷的远程仓库、分支管理等功能！赢得了全球开发者的青睐！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>静态库与动态库</title>
    <link href="http://yoursite.com/2017/04/20/%E9%9D%99%E6%80%81%E5%BA%93%E4%B8%8E%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <id>http://yoursite.com/2017/04/20/静态库与动态库/</id>
    <published>2017-04-20T08:41:46.000Z</published>
    <updated>2017-05-11T15:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先来看什么是库，库(Library)说白了就是一段编译好的二进制代码，加上头文件就可以供别人使用。库是程序代码的集合，是共享程序代码的一种方式。<br><a id="more"></a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>什么时候我们会用到库呢？一种情况是某些代码需要给别人使用，但是我们不希望别人看到源码，就需要以库的形式进行封装，只暴露出头文件。另外一种情况是，对于某些不会进行大的改动的代码，我们想减少编译的时间，就可以把它打包成库，因为库是已经编译好的二进制了，编译的时候只需要 Link 一下，不会浪费编译时间。<br>(代码执行步骤：源码–>编译–>链接–>运行)</p>
<p>上面提到库在使用的时候需要 Link，Link 的方式有两种，静态和动态，于是便产生了静态库和动态库。</p>
<h1 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h1><p>静态库即静态链接库（Windows 下的 .lib，Linux 和 Mac 下的 .a）。之所以叫做静态，是因为静态库在编译的时候会被直接拷贝一份，复制到目标程序里，这段代码在目标程序里就不会再改变了。</p>
<p>静态库的好处很明显，编译完成之后，库文件实际上就没有作用了。目标程序没有外部依赖，直接就可以运行。当然其缺点也很明显，就是会使用目标程序的体积增大。</p>
<h1 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h1><p>动态库即动态链接库（Windows 下的 .dll，Linux 下的 .so，Mac 下的 .dylib）。与静态库相反，动态库在编译时并不会被拷贝到目标程序中，目标程序中只会存储指向动态库的引用。等到程序运行时，动态库才会被真正加载进来。</p>
<p>动态库的优点是，不需要拷贝到目标程序中，不会影响目标程序的体积，而且同一份库可以被多个程序使用（因为这个原因，动态库也被称作共享库）。同时，编译时才载入的特性，也可以让我们随时对库进行替换，而不需要重新编译代码。动态库带来的问题主要是，动态载入会带来一部分性能损失，使用动态库也会使得程序依赖于外部环境。如果环境缺少动态库或者库的版本不正确，就会导致程序无法运行（Linux 下喜闻乐见的 lib not found 错误）。</p>
<h1 id="iOS-中的-Framework"><a href="#iOS-中的-Framework" class="headerlink" title="iOS 中的 Framework"></a>iOS 中的 Framework</h1><p>除了上面提到的 .a 和 .dylib 之外，Mac OS/iOS 平台还可以使用 Framework。Framework 实际上是一种打包方式，将库的二进制文件，头文件和有关的资源文件打包到一起，方便管理和分发。</p>
<p>在 iOS 8 之前，iOS 平台不支持使用动态 Framework，开发者可以使用的 Framework 只有苹果自家的 UIKit.Framework，Foundation.Framework 等。这种限制可能是出于安全的考虑。（看<a href="https://stackoverflow.com/questions/4733847/can-you-build-dynamic-libraries-for-ios-and-load-them-at-runtime" target="_blank" rel="external">这里的讨论</a>）换一个角度讲，因为 iOS 应用都是运行在沙盒当中，不同的程序之间不能共享代码，同时动态下载代码又是被苹果明令禁止的，没办法发挥出动态库的优势，实际上动态库也就没有存在的必要了。</p>
<p>由于上面提到的限制，开发者想要在 iOS 平台共享代码，唯一的选择就是打包成静态库 .a 文件，同时附上头文件（例如<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419319164&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">微信的SDK</a> ）。但是这样的打包方式不够方便，使用时也比较麻烦，大家还是希望共享代码都能能像 Framework 一样，直接扔到工程里就可以用。于是人们想出了各种奇技淫巧去让 Xcode Build 出 iOS 可以使用的 Framework，这种方法产生的 Framework 还有 “伪”(Fake) Framework 和 “真”(Real) Framework 的区别。</p>
<p>iOS 8/Xcode 6 推出之后，iOS 平台添加了动态库的支持，同时 Xcode 6 也原生自带了 Framework 支持（动态和静态都可以），上面提到的的奇技淫巧也就没有必要了。为什么 iOS 8 要添加动态库的支持？唯一的理由大概就是 Extension 的出现。Extension 和 App 是两个分开的可执行文件，同时需要共享代码，这种情况下动态库的支持就是必不可少的了。但是这种动态 Framework 和系统的 UIKit.Framework 还是有很大区别。系统的 Framework 不需要拷贝到目标程序中，我们自己做出来的 Framework 哪怕是动态的，最后也还是要拷贝到 App 中（App 和 Extension 的 Bundle 是共享的），因此苹果又把这种 Framework 称为 <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html" target="_blank" rel="external">Embedded Framework</a>。</p>
<h1 id="iOS-项目中添加-Framework"><a href="#iOS-项目中添加-Framework" class="headerlink" title="iOS 项目中添加 Framework"></a>iOS 项目中添加 Framework</h1><ul>
<li>系统库<br>项目名称 —> TARGETS —> Build Phases —> Link Binary With Libraries —> 点击 + 号搜索需要的库</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/large/006tNbRwly1fetb8yg2pej31kw0xown5.jpg" alt=""></p>
<ul>
<li><p>第三方库<br> 项目名称 —> TARGETS —> Build Phases —> Link Binary With Libraries —> 点击 + 号 —> 选择 Add Other 即可</p>
<p><img src="http://ww1.sinaimg.cn/large/006tNbRwly1fetb8od6sfj31kw0y1wos.jpg" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先来看什么是库，库(Library)说白了就是一段编译好的二进制代码，加上头文件就可以供别人使用。库是程序代码的集合，是共享程序代码的一种方式。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 开发中 GCD 的使用</title>
    <link href="http://yoursite.com/2017/04/11/iOS-%E5%BC%80%E5%8F%91%E4%B8%AD-GCD-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/04/11/iOS-开发中-GCD-的使用/</id>
    <published>2017-04-11T14:22:56.000Z</published>
    <updated>2017-05-16T16:04:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>iOS 开发中少不了多线程的使用，目前共有四种多线程方法，分别是PThread、NSThread、GCD、NSOperation。其中因为 GCD 使用起来方便高效而为广大开发人员采用！这篇文章就介绍一些开发中常见的 GCD 的用法及其注意事项。<br><a id="more"></a></p>
<h1 id="GCD（Grand-Central-Dispatch）介绍"><a href="#GCD（Grand-Central-Dispatch）介绍" class="headerlink" title="GCD（Grand Central Dispatch）介绍"></a>GCD（Grand Central Dispatch）介绍</h1><p>GCD属于系统级的线程管理，在Dispatch queue中执行需要执行的任务性能非常的高。GCD这块已经开源，地址<a href="">http://libdispatch.macosforge.org</a>。GCD中的FIFO队列称为dispatch queue，用来保证先进来的任务先得到执行。</p>
<h2 id="1-什么是GCD？"><a href="#1-什么是GCD？" class="headerlink" title="1. 什么是GCD？"></a>1. 什么是GCD？</h2><p>全称是Grand Central Dispatch，可译为“牛逼的中枢调度器”<br>纯C语言，提供了非常多强大的函数 </p>
<h2 id="2-GCD的优势"><a href="#2-GCD的优势" class="headerlink" title="2. GCD的优势"></a>2. GCD的优势</h2><p>GCD是苹果公司为多核的并行运算提出的解决方案<br>GCD会自动利用更多的CPU内核（比如双核、四核）<br>GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）<br>程序员只需要告诉GCD想要执行什么任务，不需要编写任何线程管理代码 </p>
<h2 id="3-GCD概要"><a href="#3-GCD概要" class="headerlink" title="3. GCD概要"></a>3. GCD概要</h2><ul>
<li>和operation queue一样都是基于队列的并发编程API，通过集中管理大家协同使用的线程池。</li>
<li>公开的5个不同队列：运行在主线程中的main queue，3个不同优先级的后台队列（High Priority Queue，Default Priority Queue，Low Priority Queue），以及一个优先级更低的后台队列Background Priority Queue（用于I/O）</li>
<li>可创建自定义队列：串行或并列队列。自定义一般放在Default Priority Queue和Main Queue里。</li>
<li>操作是在多线程上还是单线程主要是看队列的类型和执行方法，并行队列异步执行才能在多线程，并行队列同步执行就只会在这个并行队列在队列中被分配的那个线程执行。<h1 id="GCD-中的基本概念"><a href="#GCD-中的基本概念" class="headerlink" title="GCD 中的基本概念"></a>GCD 中的基本概念</h1></li>
<li>队列  dispatch queue </li>
<li>任务</li>
<li>队列组</li>
</ul>
<h1 id="GCD-在-iOS-开发中常见用法"><a href="#GCD-在-iOS-开发中常见用法" class="headerlink" title="GCD 在 iOS 开发中常见用法"></a>GCD 在 iOS 开发中常见用法</h1><h2 id="1-延迟执行"><a href="#1-延迟执行" class="headerlink" title="1.  延迟执行"></a>1.  延迟执行</h2><p>示例：以下代码标示延迟3秒钟执行<br>    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{<br>    这里是需要延迟执行的代码<br>    });</p>
<h2 id="2-实现一次性代码"><a href="#2-实现一次性代码" class="headerlink" title="2.  实现一次性代码"></a>2.  实现一次性代码</h2><p>dispatch_once_t要是全局或static变量，保证dispatch_once_t只有一份实例</p>
<pre><code>+ (UIColor *)boringColor;
{
 static UIColor *color;
 //只运行一次
 static dispatch_once_t onceToken;
 dispatch_once(&amp;onceToken, ^{
      color = [UIColor colorWithRed:0.380f green:0.376f blue:0.376f alpha:1.000f];
 });
 return color;
}
</code></pre><hr>
<pre><code>-(void)touchesBegan:(NSSet *)touches withEvent: (UIEvent *)event
{
     static dispatch_once_t onceToken;
     dispatch_once(&amp;onceToken, ^{
         NSLog(@&quot;该行代码只执行一次&quot;);
     });
 }
</code></pre><h2 id="3-使用队列组解决-需求：从网络上下载两张图片，把两张图片合并成一张最终显示在view上"><a href="#3-使用队列组解决-需求：从网络上下载两张图片，把两张图片合并成一张最终显示在view上" class="headerlink" title="3.  使用队列组解决      需求：从网络上下载两张图片，把两张图片合并成一张最终显示在view上"></a>3.  使用队列组解决      需求：从网络上下载两张图片，把两张图片合并成一张最终显示在view上</h2><pre><code>dispatch_group_t group =  dispatch_group_create();  //创建一个队列组
dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // 执行1个耗时的异步操作  下载第一张图片

});

dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
    // 执行1个耗时的异步操作   下载第二张图片

});

dispatch_group_notify(group, dispatch_get_main_queue(), ^{
    // 等前面的异步操作都执行完毕后，回到主线程...

}); 
</code></pre><h1 id="GCD-死锁问题"><a href="#GCD-死锁问题" class="headerlink" title="GCD 死锁问题"></a>GCD 死锁问题</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 开发中少不了多线程的使用，目前共有四种多线程方法，分别是PThread、NSThread、GCD、NSOperation。其中因为 GCD 使用起来方便高效而为广大开发人员采用！这篇文章就介绍一些开发中常见的 GCD 的用法及其注意事项。&lt;br&gt;
    
    </summary>
    
    
      <category term="GCD" scheme="http://yoursite.com/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>关于使用 Hexo + GitHub Pages 搭建个人博客的流程</title>
    <link href="http://yoursite.com/2017/03/25/hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/03/25/hexo 搭建博客/</id>
    <published>2017-03-25T06:28:18.000Z</published>
    <updated>2017-04-21T11:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>越来越多的人开始借助于 GitHub 来免费搭建个人博客，一方面记录下自己学习生活的点滴，另一方面也给后来者分享经验总结。提升自己，方便他人。本文就写一下 Mac 平台搭建博客的总结和过程中遇到的一些坑。<br><a id="more"></a></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><hr>
<p>整个搭建过程大致需要以下步骤完成</p>
<ul>
<li>安装 <code>node.js</code> </li>
<li>安装 <code>git</code>        </li>
<li>安装 <code>hexo</code>     </li>
<li>生成本地静态博客，在浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 可以看到</li>
<li>注册 GitHub 账号，新建仓库 格式为 <code>用户名.github.io</code>   例如：<code>feng9152.github.io</code>  配置 GitHub 账户与你电脑之间的 <code>SSH</code>连接</li>
<li>配置 hexo 目录下 <code>_config.yml</code> 文件 </li>
<li>浏览器查看(网络同步原因可能会延迟几分钟) <a href="https://feng9152.github.io/" target="_blank" rel="external">https://feng9152.github.io/</a> 其中 <code>feng9152</code> 换成自己的用户名可以看到与 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 这里一样的页面</li>
<li>配置 hexo 主题目录下 <code>_config.yml</code> 文件</li>
</ul>
<h1 id="开始安装配置"><a href="#开始安装配置" class="headerlink" title="开始安装配置"></a>开始安装配置</h1><hr>
<h2 id="查看电脑是否安装-node-js"><a href="#查看电脑是否安装-node-js" class="headerlink" title="查看电脑是否安装 node.js"></a>查看电脑是否安装 <code>node.js</code></h2><blockquote>
<p>命令：<code>node --version</code> 显示版本号：例如 <code>v6.9.5</code> 即安装有,否则请移步> <a href="https://nodejs.org/en/" target="_blank" rel="external">NOde.js</a>安装</p>
</blockquote>
<h2 id="查看电脑是否安装-git"><a href="#查看电脑是否安装-git" class="headerlink" title="查看电脑是否安装 git"></a>查看电脑是否安装 <code>git</code></h2><blockquote>
<p>命令：<code>git --version</code> 显示版本号：例如 <code>git version 2.10.1 (Apple Git-78)√</code> 即安装有,否则请移步>  <a href="https://git-scm.com/" target="_blank" rel="external">git</a> 安装</p>
</blockquote>
<h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 <code>hexo</code></h2><blockquote>
<p>参考 <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 官方文档<br> <code>$ npm install -g hexo-cli</code> 或者 <code>$ sudo npm install -g hexo-cli</code>  </p>
<p><strong><em>⚠️出现如下图所示是网络问题 可以多次尝试或者其它时间再试即可</em></strong><br><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fduazhc30qj30vg0kmgqd.jpg" alt="">  </p>
<p>安装成功后 建议指定位置自定义新建文件夹 比如 blog<br><code>$ cd blog</code><br><code>$ hexo init</code><br><code>$ hexo g</code><br><code>$ npm install</code><br>会在 blog 文件夹下生成目录文件   </p>
<blockquote>
<p><code>_config.yml</code><br><code>db.json</code><br><code>node_modules</code><br><code>package.json</code><br><code>scaffolds</code><br><code>source</code><br><code>themes</code> </p>
</blockquote>
<p><code>$ hexo s</code> 访问本地 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 可以看到博客已经搭建成功页面  <img src="https://ww4.sinaimg.cn/large/006tKfTcly1fe0esml4cjj31kw0vq7wh.jpg" alt=""></p>
</blockquote>
<h2 id="注册-Github-账户，已有账户的跳过，新建仓库，如下图"><a href="#注册-Github-账户，已有账户的跳过，新建仓库，如下图" class="headerlink" title="注册 Github 账户，已有账户的跳过，新建仓库，如下图"></a>注册 <a href="https://github.com" target="_blank" rel="external">Github</a> 账户，已有账户的跳过，新建仓库，如下图</h2><blockquote>
<p><img src="https://ww2.sinaimg.cn/large/006tKfTcly1fe0m5b4ppej31570xuqc1.jpg" alt="">  </p>
</blockquote>
<h2 id="配置-GitHub-与你的电脑之间的-SSH-连接"><a href="#配置-GitHub-与你的电脑之间的-SSH-连接" class="headerlink" title="配置 GitHub 与你的电脑之间的 SSH 连接"></a>配置 GitHub 与你的电脑之间的 SSH 连接</h2><blockquote>
<p>添加 SSH Key 到 GitHub   检查本地是否有 SSH Keys ？<br><code>$ ls -al ~/.ssh</code><br>如果有文件<code>id_rsa.pub</code>或<code>id_dsa.pub</code><br>Find前往文件夹 <code>~/.ssh/id_rsa.pub</code> 打开id_rsa.pub文件，里面的信息即为 SSH key，复制信息。<br>进入 Github –> Settings 按照下图所示操作即可完成 SSH Key 添加:</p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe0msh0z2dj313j0ziag8.jpg" alt=""><br>进去后点击右上角添加新的 SSH Key<br><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe0mx38qvmj31jo0oyjxe.jpg" alt="">  </p>
<p>如果没有文件 <code>id_rsa.pub</code>或<code>id_dsa.pub</code> 需要生成 SSH Key<br>终端输入以下命令：<br> <code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br>这里 <code>&quot;your_email@example.com&quot;</code> 替换成你注册 GitHub 的邮箱即可，终端会有一个 SHA256 编码生成即代表成功。<br>按照上面方法步骤前往文件夹 找到 SSH Key 添加到 GitHub 即可</p>
</blockquote>
<h2 id="修改-Hexo-目录-此处及刚才创建的-blog-文件夹-下-config-yml-文件"><a href="#修改-Hexo-目录-此处及刚才创建的-blog-文件夹-下-config-yml-文件" class="headerlink" title="修改 Hexo 目录(此处及刚才创建的 blog 文件夹)下 _config.yml 文件"></a>修改 Hexo 目录(此处及刚才创建的 blog 文件夹)下 <code>_config.yml</code> 文件</h2><blockquote>
<p>打开 <code>_config.yml</code> 文件 下拉到最后 修改成以下样式： <code>feng9152</code>  替换成自己的用户名</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fe0ojnaeevj30ts05k0tm.jpg" alt=""></p>
</blockquote>
<p><strong><em>⚠️此处一定要严格按照格式修改，否则无法推送到 GitHub 上， 每个<code>:</code>后需要一个空格， <code>type</code>、 <code>repo</code>、<code>branch</code> 前面需要留出两个空格！</em></strong></p>
<h2 id="发表文章操作步骤"><a href="#发表文章操作步骤" class="headerlink" title="发表文章操作步骤"></a>发表文章操作步骤</h2><ul>
<li><strong>hexo new</strong> “你的文章标题”  # 新建文章</li>
<li><strong>hexo g</strong>  # 生成文章</li>
<li><strong>hexo d</strong>  # 部署文章到网站<br><strong>注意：以上需要在你所定义的博客文件夹目录下进行</strong></li>
</ul>
<h2 id="如何设置「阅读全文」？"><a href="#如何设置「阅读全文」？" class="headerlink" title="如何设置「阅读全文」？"></a>如何设置「阅读全文」？</h2><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。 NexT 提供三种方式来控制文章在首页的显示方式。 也就是说，在首页显示文章的摘录并显示 阅读全文 按钮，可以通过以下方法：</p>
<ol>
<li>在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式 推荐</li>
<li>在文章的 front-matter 中添加 description，并提供文章摘录</li>
<li><p>自动形成摘要，在 主题配置文件 中添加：</p>
<pre><code>auto_excerpt  
   enanle: true  
   length: 150    
</code></pre><p> 默认截取的长度为 150 字符，可以根据需要自行设定</p>
</li>
</ol>
<p>建议使用 <code>&lt;!-- more --&gt;</code>（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p>
<h2 id="更改文章内链接样式"><a href="#更改文章内链接样式" class="headerlink" title="更改文章内链接样式"></a>更改文章内链接样式</h2><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，添加如下css样式:<br><img src="http://ww1.sinaimg.cn/large/006tNbRwly1feui9df1llj30dg07ugmb.jpg" alt=""><br>选择.post-body是为了不影响标题，选择p是为了不影响首页“阅读全文”的显示样式。</p>
<h1 id="绑定个人域名（可选）"><a href="#绑定个人域名（可选）" class="headerlink" title="绑定个人域名（可选）"></a>绑定个人域名（可选）</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越来越多的人开始借助于 GitHub 来免费搭建个人博客，一方面记录下自己学习生活的点滴，另一方面也给后来者分享经验总结。提升自己，方便他人。本文就写一下 Mac 平台搭建博客的总结和过程中遇到的一些坑。&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
